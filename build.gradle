buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
    dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version '1.4.0'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

def build_number = System.env.BUILD_NUMBER ?: 1
def release_type = System.env.TC_RELEASE_TYPE ?: "alpha"

ext.configFile = file('gradle.properties')
ext.config = parseConfig(configFile)

version = "${minecraft_version}-${forge_version}-b${build_number}"
group = 'leaf.soulhome' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${project.jar_name}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))


minecraft {
    mappings channel: 'official', version: "${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory project.file('run')
            arg "-mixin.config=soulhome.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                soulhome {
                    source sourceSets.main
                }
            }

            //The below if statements are to add args to your gradle.properties file in user home
            // (for me on windows, I created gradle.properties in %userprofile%\.gradle)
            // (DO NOT add them directly to the gradle.properties file for this project)
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
        }

        server {
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                soulhome {
                    source sourceSets.main
                }
            }
        }

        data {
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'soulhome', '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/')

            mods {
                soulhome {
                    source sourceSets.main
                }
            }
        }

    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

mixin {
    add sourceSets.main, "soulhome.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/main/generated' }

repositories {
    maven {
        // location of the maven that hosts JEI files
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        //used for patchouli
        url "https://maven.blamejared.com/"
    }
    maven {
        //curio
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        //HWYLA
        url "https://maven.tehnut.info"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    mavenCentral()

    whenObjectAdded {
//ForgeGradle adds these in an afterEvaluate, so we need to catch them as they're added and exclude mod artifacts/groups
        if (it instanceof MavenArtifactRepository) {
            def url = it.url.toString()
            if (url == 'https://maven.minecraftforge.net/' || url == 'https://libraries.minecraft.net/' || url == 'https://repo.maven.apache.org/maven2/') {
                try {
                    it.content {
                        excludeGroup 'curse.maven'
                        excludeGroup 'mezz.jei'
                        excludeGroup 'top.theillusivec4.curios'
                        excludeGroup 'vazkii.patchouli'
                    }
                    println("Adding exclusions to ${url}")
                } catch (Exception ignored) {
                    //oh well
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")

    implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "soulhome",
                "Specification-Vendor"    : "soulhome",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "soulhome",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "soulhome.mixins.json"

        ])
    }
}

processResources {
    // Exclude datagenerator .cache directory
    exclude '.cache'

    filesMatching('data/soulhome/patchouli_books/guide/book.json') {
        filter {
            it.replaceAll("buildNumber", "${build_number}")
        }
    }
}

task incrementBuildNumber {
    doFirst {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

def parseConfig(File config) {
    if(config.exists()){
        config.withReader {
            def prop = new Properties()
            prop.load(it)
            return (new ConfigSlurper().parse(prop))
        }
    } else {
        return null
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

// Prevent Mixin annotation processor from getting into IDEA's annotation processor settings
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

def resolvedChangelog = null

//closure to generate the changelog once, and only when needed by CurseGradle
def changeLogResolver = { ->
    String generatedChangelog;

    //autogenerated log via teamcity, which uses a generic powershell script to generate a changelog
    def autogeneratedChangelog = project.file("docs/changelog_Soulhome_${build_number}.txt")
    if (autogeneratedChangelog.exists()) {
        //Add any version specific changelog stuff
        String changelogText = autogeneratedChangelog.getText()
        changelogText = changelogText.replace("+ : ","<br>")
        generatedChangelog = "$changelogText"
    } else {
        generatedChangelog = "Unable to generate changelog :("
    }

    //add hand written log to put at the top
    def releaseNotesFile = project.file("docs/release_${build_number}.txt")
    if (releaseNotesFile.exists()) {
        //Add any version specific changelog stuff
        def releaseNotes = releaseNotesFile.getText()
        generatedChangelog = "$releaseNotes<br>-<br> $generatedChangelog"
    }

    generatedChangelog =
            "Soulhome - Build " + build_number.toString() +
                    "<br><br> $generatedChangelog"
    resolvedChangelog = generatedChangelog
    return generatedChangelog
}

if (System.getenv("CURSEFORGE_API_TOKEN") != null || project.hasProperty('curseforge_api_token')) {
    println "Enabling Curseforge config"
    tasks.named('curseforge').configure { dependsOn(jar) }
    curseforge {
        //https://authors.curseforge.com/account/api-tokens
        apiKey = System.getenv("CURSEFORGE_API_TOKEN") ?: project.findProperty("curseforge_api_token")

        //Main - Cosmere
        project {
            id = '574511'
            changelogType = "html"
            changelog = changeLogResolver
            releaseType = "${release_type}"
            mainArtifact(jar) {
                relations {
                    optionalDependency "jei"
                    optionalDependency "patchouli"
                }
            }
            //addArtifact apiJar.get()
            addGameVersion "Java ${java_version}"
            addGameVersion "${minecraft_version}"
        }
    }
}

